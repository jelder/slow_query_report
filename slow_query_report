#!/usr/bin/perl
# slow_query_report
# Jacob Elder <jacob.elder@gmail.com>
use strict;
use warnings;
use Statistics::Descriptive;
use Getopt::Long;
use Sys::Hostname;
use Data::Dumper;

# Different ways to slice up the data;
my @numeric_fields = qw(Query_seconds Lock_time Rows_sent Rows_examined);
my @string_fields = qw(database host user ip);
my $sort_field = 'score';
my @show_hosts = ();
my @hide_hosts = ();
my @show_users = ();
my @hide_users = ();
my @show_databases = ();
my @hide_databases = ();
my $squelch = 0;
my $top = 0;
my $regex = '';

# Used for distinguishing between local and remote queries.
my @local = (hostname, 'localhost', 'localhost.localdomain');
my ($show_local,$show_remote) = (1, 1);

# Used for detecting when it is safe to strip domain from hostnames.
my $strip_domains = -1;
my $domain = '';

sub help () {
    my @bool = ('to ignore','to show');
    print <<END;
Usage: slow_query_report [OPTIONS]

        --local,   -l      Include local queries (default is $bool[$show_local])
        --remote,  -r      Include remote queries (default is $bool[$show_remote])
        --sort     -s      Sort results by this attribute (default is $sort_field)
        --squelch, -q      Ignore queries where --sort attribute is less than this (default is $squelch)
        --top,     -t      Show only the top N queries
        --show-hosts       Include only queries from these hosts
        --hide-hosts       Ignore queries from these hosts
        --show-users       Include only queries from these users
        --hide-users       Ignore queries from these users
        --show-databases   Include only queries on these databases 
        --hide-databases   Ignore queries from these hosts
        --regex   -x       Only consider queries matching this
        --help             Show this help text and exit

The --local and --remote options can be negated (e.g. --no-local).

The show and ignore options should be single value or a comma-separated list (e.g. --show-database=mysql,information-schema).

The --regex option is treated like m/foo/sim.

Valid sort fields include:
END
    my @extra_fields;
    push @extra_fields, $_.'_min', $_.'_max', $_.'_median', $_.'_total' for @numeric_fields;
    print join ' ', @extra_fields, "\n";
    exit 75;
}

GetOptions(
    'local|l!'          => \$show_local,
    'remote|r!'         => \$show_remote,
    'show-hosts=s'      => \@show_hosts,
    'hide-hosts=s'      => \@hide_hosts,
    'show-users=s'      => \@show_users,
    'hide-users=s'      => \@hide_users,
    'show-databases=s'  => \@show_databases,
    'hide-databases=s'  => \@hide_databases,
    'sort|s=s'          => \$sort_field,
    'squelch|q=s'       => \$squelch,
    'top|t=s'           => \$top,
    'regex|x=s'         => \$regex,
    'help'              => \&help,
) or help;

@show_hosts         = split(/,/,join(',',@show_hosts));
@hide_hosts         = split(/,/,join(',',@hide_hosts));
@show_users         = split(/,/,join(',',@show_users));
@hide_users         = split(/,/,join(',',@hide_users));
@show_databases     = split(/,/,join(',',@show_databases));
@hide_databases     = split(/,/,join(',',@hide_databases));

if ((@show_hosts && @hide_hosts) ||
    (@show_users && @hide_users) ||
    (@show_databases && @hide_databases) ||
    ($top && $squelch)) {
    print "Don't mix mutually exlusive arguments!\n";
    help;
}

# The MySQL slow log format appears to include a header with some metadata about the query that follows. In reality, each line of the header is only recorded if it differs from the previous query. This is MySQL trying to be helpful and failing miserably. Under extreme circumstances, many queries can appear under an the same header.
my %fields = ();
my $query = '';

my %records = ();    # Eventually holds all folded records.
my @records_times;     # Used for finding first and last query in case logs aren't in order.

sub merge (\%$) {
    my ($fields,$query) = @_;

    # Handle all the different ways we can slice this up.
    if (grep { $fields->{'host'} eq $_ } @local) {
        return unless $show_local;
    } else {
        return unless $show_remote;
    }
    if (@show_hosts) { return unless grep { $fields->{'host'} eq $_ } @show_hosts }
    if (@show_users) { return unless grep { $fields->{'user'} eq $_ } @show_users }
    if (@show_databases) { return unless grep { $fields->{'database'} eq $_ } @show_databases }
    if (@hide_hosts) { return if grep { $fields->{'host'} eq $_ } @hide_hosts  }
    if (@hide_users) { return if grep { $fields->{'user'} eq $_ } @hide_users }
    if (@hide_databases) { return if grep { $fields->{'database'} eq $_ } @hide_databases }
    if ($regex) { return unless $query =~ m/$regex/sim; }
    
    my $query_generic = $query;    # This is our ID.
    $query_generic =~ s/\d+/\?/g;
    $query_generic =~ s/([\'\"]).+?([\'\"])/$1\?$2/g;

    # Push all query metadata into %records.
    for my $field (@numeric_fields, @string_fields) {
        push @{$records{$query_generic}{$field}}, $fields->{$field};
    } 
    
    # Handle missing reverse DNS.
    if ($fields->{'host'} eq '') {
        $fields->{'host'} = $fields->{'ip'};
        $strip_domains = 0;
    }

    # Allow the report to strip domains when redundant. This value is a trap door.
    if ($strip_domains != 0) {    
        $fields->{'host'} =~ m#[\w-]+(\..+)#;
        $domain = $1 unless $domain;
        if (grep { $fields->{'host'} eq $_ } @local) {
            $strip_domains = 1;
        } elsif ($domain eq $1) {
            $strip_domains = 1;
            $domain = $1;
        } else { 
            $strip_domains = 0;
        }
    }

    # Allow the report show a generic form of the query only when it has multiple forms.
    if (exists $records{$query_generic}{'query_example'}) {
        if ($query eq $records{$query_generic}{'query_example'}) {
            $records{$query_generic}{'constant'} = 1;
        } else {
            $records{$query_generic}{'constant'} = 0;
        }
    } else {
        $records{$query_generic}{'query_example'} = $query;
    }

    $records{$query_generic}{'count'}++;
    push @records_times, $fields->{'timestamp'};
}

while (<>) {
    chomp;
    next if m#^/usr/.*mysql#;
    next if m#^Tcp port#;
    next if m#^Time\s*Id\s*Command\s*Argument#;
    next if m#^\s*$#;
    if (m/^# Time: (\d\d)(\d\d)(\d\d)\s+(\d?\d):(\d\d):(\d\d)/) {
        $fields{'timestamp'} = sprintf("$1/$2/$3 %02d:$5:$6", $4);
    } elsif (m/^# User\@Host: (\w*\[?\w*\]?) \@ ([\w\._-]*) \[([\d.]*)\]/) {
        @fields{qw(user host ip)} = ($1, $2, $3);
    } elsif (m/^# Query_time: (\d+)\s+Lock_time: (\d+)\s+Rows_sent: (\d+)\s+Rows_examined: (\d+)/) {
        @fields{@numeric_fields} = ($1, $2, $3, $4);
    } elsif (m/^use ([\w-]*);/) {    
        $fields{'database'} = $1;
    } elsif (m/^set .*;/i) {    
        $query .= "$_\n";
    } elsif (m/;$/) {
        merge(%fields, $query.$_);
        $query = '';
    } else {
        $query .= "$_\n";
    }
}

for my $query (keys %records) {
    # Add a total, min, max, and median field for each numeric field.
    for my $field (@numeric_fields) {
        my $stat = Statistics::Descriptive::Full->new;
        $stat->add_data(@{$records{$query}{$field}});
        $records{$query}{$field.'_min'} = $stat->min; 
        $records{$query}{$field.'_median'} = $stat->median(); 
        $records{$query}{$field.'_p95'} = ($stat->percentile(95))[0] || 0;
        $records{$query}{$field.'_max'} = $stat->max; 
        $records{$query}{$field.'_total'} = $stat->sum(); 

    }
    # Make string fields contain only unique values.
    for my $field (@string_fields) {
        my @unique;
        my $last = '';
        for my $value (sort @{$records{$query}{$field}}) {
            push (@unique, $value) unless ($value eq $last);
            $last = $value;     
        }
        $records{$query}{$field} = [@unique];
    }
    # Strip domain names if possible.
    if ($strip_domains == 1 && $domain) {
        s/$domain// for @{$records{$query}{'host'}};
    }
    # The score is calculated as 95th percentile of query seconds multiplied by number of occurences
    print STDERR <<END;
count: $records{$query}{'count'}
p95: $records{$query}{'Query_seconds_p95'}

END
    $records{$query}{'score'} = $records{$query}{'count'} * $records{$query}{'Query_seconds_p95'}; 
}

if ($squelch) {
    for my $query (keys %records) {
        delete $records{$query} if $records{$query}{$sort_field} < $squelch;
    }
}

print "Looking for m/$regex/sim.\n" if $regex;
print "Ignoring queries with $sort_field < $squelch\n" if $squelch;
print "Ignoring queries from localhost.\n" unless $show_local;
print "Ignoring remote queries.\n" unless $show_remote;
print 'Showing only ' . join(', ', @show_hosts) . ".\n" if @show_hosts;
print 'Ignoring ' . join(', ', @hide_hosts) . ".\n" if @hide_hosts;
print 'Showing only ' .(join ', ', @show_users) . ".\n" if @show_users;
print 'Ignoring ' . join(', ', @hide_users) . ".\n" if @hide_users;
print 'Showing only ' . join(', ', @show_databases) . ".\n" if @show_databases;
print 'Ignoring ' . join(', ', @hide_databases) . ".\n" if @hide_databases;

my $records_count = scalar keys %records;
if ($records_count == 0) {
    print "No problem queries found.\n";
    exit;
}

@records_times = sort @records_times;
my $records_first = $records_times[0];
my $records_last = $records_times[-1];
my $top_counter;

print "Found $records_count problematic quer", $records_count > 1 ? 'ies' : 'y',
    " after normalization, occuring between $records_first and $records_last.",
    $top ? " Showing top $top." : '', "\n";
print "\n";

for my $query (sort {$records{$b}{$sort_field} <=> $records{$a}{$sort_field}} keys %records) {
    for my $field (@numeric_fields) {
        my ($min, $median, $p95, $max, $total) = (
            $records{$query}{$field.'_min'},
            $records{$query}{$field.'_median'},
            $records{$query}{$field.'_p95'},
            $records{$query}{$field.'_max'},
            $records{$query}{$field.'_total'}
        );
        if ($min == $max) {
            print "# $field: $min\n";
        } else {
            print "# $field: min=$min median=$median max=$max p95=$p95 total=$total\n";
        } 
    }
    print "# Score: $records{$query}{'score'}\n";
    print "# Host: "        . join(', ', @{$records{$query}{'host'}})     . "\n";
    print "# Database: "    . join(', ', @{$records{$query}{'database'}})    . "\n";
    print "# User: "        . join(', ', @{$records{$query}{'user'}})    . "\n";
    if ($records{$query}{'count'} == 1) {
        print "# Query:\n$records{$query}{'query_example'}\n\n";
    } elsif ($records{$query}{'constant'} == 1) {
        print "# $records{$query}{'count'} occurrences:\n",
            $records{$query}{'query_example'}, "\n\n";
    } else { 
        print "# $records{$query}{'count'} occurrences:\n$query\n\n";
        print "# Example:\n", $records{$query}{'query_example'}, "\n\n"
            if $query ne $records{$query}{'query_example'};
    }
    last if $top && ++$top_counter == $top;
}

1;
